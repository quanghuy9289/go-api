# This is k8s deployment configure file that deploy all postgres and go-api service to k8s cluster
---
# postgres secret variable to inject into deployed container
apiVersion: v1
kind: Secret
metadata:
  name: postgres-secret
type: Opaque
stringData: # We dont need to worry about converting to base64
  POSTGRES_USER: "postgres"
  POSTGRES_PASSWORD: "admin"
  POSTGRES_DB: "ctbserver"
  DB_SERVER_HOST: fullstack-postgres
  DB_SERVER_PORT: "5432"
  DB_DRIVER: "postgres"
  DB_SERVER_USER: "postgres"
  DB_SERVER_PASS: "admin"
  DB_NAME: "ctbwebmaster"

---
# Persisten Volume to contain postgres db
apiVersion: v1
kind: PersistentVolume # Create a PV
metadata:
  name: postgres-pv-volume
  labels:
    type: local
    app: fullstack-postgres
spec:
  storageClassName: manual # Storage class. A PV Claim requesting the same storageClass can be bound to this volume.
  capacity:
    storage: 5Gi
  accessModes:
    - ReadWriteMany
  hostPath: # hostPath PersistentVolume is used for development and testing. It uses a file/directory on the Node to emulate network-attached storage
    path: "/mnt/data"
  persistentVolumeReclaimPolicy: Retain # Retain the PV even after PVC is deleted.

---
# Persistent Volume Claim to request data from Persistent Volumn above "postgres-pv-volume"
apiVersion: v1
kind: PersistentVolumeClaim # Create a PersistentVolumeClaim to request a PersistentVolume storage
metadata: # Claim name and labels
  name: postgres-pv-claim
  labels:
    app: fullstack-postgres
spec: # Access mode and resource limits
  storageClassName: manual # Request a certain storage class
  accessModes:
    - ReadWriteMany # ReadWriteMany means the volume can be mounted as read-write by many Nodes
  resources:
    requests:
      storage: 5Gi

---
# Postgres deployment, persist db data through the above pvc "postgres-pv-claim"
apiVersion: apps/v1
kind: Deployment # Type of the kubernetes resource
metadata:
  name: fullstack-postgres # Name of the deployment
  labels: # Labels applied to this deployment
    app: fullstack-postgres
spec:
  selector:
    matchLabels: # This deployment applies to the Pods matching the specified labels
      app: fullstack-postgres
      tier: postgres
  replicas: 1
  template: # Template for the Pods in this deployment
    metadata:
      labels: # Labels to be applied to the Pods in this deployment
        app: fullstack-postgres
        tier: postgres
    spec: # The spec for the containers that will be run inside the Pods in this deployment
      containers:
        - image: postgres:latest # The container image
          name: postgres
          imagePullPolicy: "IfNotPresent"
          envFrom: # Get the environmental variables from a secret file whose name is "postgres-secret"
            - secretRef:
                name: postgres-secret

          ports:
            - containerPort: 5432 # The port that the container exposes
              name: postgres
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: postgres-persistent-storage # This name should match the name specified in `volumes.name`
      volumes: # A PersistentVolume is mounted as a volume to the Pod
        - name: postgres-persistent-storage
          persistentVolumeClaim:
            claimName: postgres-pv-claim

---
# Postgres service to expose postgres application
apiVersion: v1 # API version
kind: Service # Type of kubernetes resource
metadata:
  name: fullstack-postgres # Name of the resource
  labels: # Labels that will be applied to the resource
    app: fullstack-postgres
spec:
  type: NodePort
  ports:
    - port: 5432
  selector: # Selects any Pod with labels `app=fullstack-postgres,tier=postgres`
    app: fullstack-postgres
    tier: postgres

---
# Go API deployment
apiVersion: apps/v1
kind: Deployment # Type of the kubernetes resource
metadata:
  name: go-api # Name of the Kubernetes resource
  labels:
    app: go-api
spec:
  replicas: 1 # Number of pods to run at any given time
  selector:
    matchLabels:
      app: go-api # This deployment applies to any Pods matching the specified label
  template: # This deployment will create a set of pods using the configurations in this template
    metadata:
      labels: # The labels that will be applied to all of the pods in this deployment
        app: go-api
    spec: # Spec for the container which will run in the Pod
      containers:
        - name: go-api
          image: quanghuy9289/go-api # The image we are getting from dockerhub
          imagePullPolicy: IfNotPresent # If we have not pulled it before, get it from dockerhub
          ports:
            - name: http
              containerPort: 7777 # Should match the port number that the Go application listens on
          envFrom:
            - secretRef:
                name: postgres-secret # Name of the secret environmental variable file to load

---
# Go API service
apiVersion: v1
kind: Service # Type of the kubernetes resource
metadata:
  name: go-api # Name of the Kubernetes resource
  labels: # Labels that will be applied to the resource
    app: go-api
spec:
  type: NodePort # Gives each node an external IP thatâ€™s accessible from outside the cluster and also opens a Port.
  selector:
    app: go-api # Selects any Pod with labels `app=api-modules`
  ports:
    - name: http
      port: 7777
      targetPort: 7777
